// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @default(cuid())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  phone         String?    @unique
  notifications Int?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  tokens        Token[]
  favorites     Favorite[]
  messages      Message[]
  stremaMessage StremaMessage[]
  room          Room[]
  sold Sold[]
  purchase Purchase[]
  stream Stream[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  image       String?
  name        String
  price       Int
  uploadVideo String?
  link        String?    @db.Text
  description String?    @db.Text
  favorites   Favorite[]
  message     Message[]
  room        Room[]
  sold Sold[]
  purchase Purchase[]

  @@unique([id])
  @@index([userId])
}

model Sold {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  saleIs Boolean @default(false)
  @@index([userId, productId])
}

model Purchase {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  purchaseIs String
  @@index([userId, productId])
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String   @db.MediumText
  readOrNot Boolean?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String

  @@index([userId, productId, roomId])
}

model Room {
  id             String    @id @default(cuid())
  name           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastChat       String?
  timeOfLastChat DateTime?
  productOwnerId String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  message        Message[]

  @@index([userId, productId])
}

model StremaMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String
  message   String   @db.MediumText
  
  @@index([userId])
}

model Stream {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String    @db.MediumText
  link        String?    @db.Text
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  stremaMessage StremaMessage[]
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String
}
